
// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
let –ø–æ–¥–ø–∏—Å–∫–∏ = JSON.parse(localStorage.getItem("checkme_subs")) || [
  { id: 1, name: "–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å", price: 299, active: true, category: "–ú–µ–¥–∏–∞" },
  { id: 2, name: "Skyeng", price: 1490, active: true, category: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" },
  { id: 3, name: "iCloud", price: 149, active: false, category: "–û–±–ª–∞–∫–æ" }
];
let –∫–∞—Ä—Ç—ã = JSON.parse(localStorage.getItem("checkme_cards")) || ["‚Ä¢ 1234"];
let —Å–µ–º—å—è = JSON.parse(localStorage.getItem("checkme_family")) || ["–ê–Ω–Ω–∞"];

let donutChart, barChart, analyticsChart;

// === –≠–ö–†–ê–ù–´ ===
function switchScreen(screen) {
  document.querySelectorAll(".screen").forEach(s => s.classList.remove("active"));
  document.getElementById(`screen-${screen}`).classList.add("active");
  document.querySelectorAll(".nav-btn").forEach(b => b.classList.remove("active"));
  document.querySelector(`.nav-btn[data-target="${screen}"]`).classList.add("active");
  render();
}

// === –¢–ê–ë–´ ===
function toggleSubTab(type) {
  document.getElementById("tab-active").classList.toggle("active", type === "active");
  document.getElementById("tab-inactive").classList.toggle("active", type !== "active");
  document.getElementById("active-subs").classList.toggle("hidden", type !== "active");
  document.getElementById("inactive-subs").classList.toggle("hidden", type === "active");
}

// === –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£ ===
function addSubPrompt() {
  const name = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:");
  const price = parseInt(prompt("–¶–µ–Ω–∞ (‚ÇΩ):"));
  const category = prompt("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:");

  if (name && price && category) {
    –ø–æ–¥–ø–∏—Å–∫–∏.push({ id: Date.now(), name, price, category, active: true });
    saveData();
    render();
  }
}

// === –î–û–ë–ê–í–ò–¢–¨ –ö–ê–†–¢–£ ===
function addCard() {
  const last4 = prompt("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:");
  if (last4 && /^\d{4}$/.test(last4)) {
    –∫–∞—Ä—Ç—ã.push("‚Ä¢ " + last4);
    saveData();
    render();
  }
}

// === –î–û–ë–ê–í–ò–¢–¨ –£–ß–ê–°–¢–ù–ò–ö–ê ===
function addFamilyMember() {
  const name = prompt("–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:");
  if (name) {
    —Å–µ–º—å—è.push(name);
    saveData();
    render();
  }
}

// === –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò ===
function toggleSub(id) {
  const sub = –ø–æ–¥–ø–∏—Å–∫–∏.find(s => s.id === id);
  if (sub) {
    sub.active = !sub.active;
    saveData();
    render();
  }
}

function removeSub(id) {
  –ø–æ–¥–ø–∏—Å–∫–∏ = –ø–æ–¥–ø–∏—Å–∫–∏.filter(s => s.id !== id);
  saveData();
  render();
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï ===
function saveData() {
  localStorage.setItem("checkme_subs", JSON.stringify(–ø–æ–¥–ø–∏—Å–∫–∏));
  localStorage.setItem("checkme_cards", JSON.stringify(–∫–∞—Ä—Ç—ã));
  localStorage.setItem("checkme_family", JSON.stringify(—Å–µ–º—å—è));
  localStorage.setItem("checkme_name", document.getElementById("profile-name").value);
  localStorage.setItem("checkme_email", document.getElementById("profile-email").value);
}

// === –¢–ï–ú–ù–ê–Ø –¢–ï–ú–ê ===
function toggleTheme() {
  document.body.classList.toggle("dark");
  localStorage.setItem("checkme_theme", document.body.classList.contains("dark") ? "dark" : "light");
}

// === –û–¢–†–ò–°–û–í–ö–ê ===
function render() {
  const activeList = document.getElementById("active-subs");
  const inactiveList = document.getElementById("inactive-subs");
  const totalEl = document.getElementById("total-balance");
  const cardsEl = document.getElementById("cards-list");
  const familyEl = document.getElementById("family-list");
  const barCanvas = document.getElementById("barChart");
  const donutCanvas = document.getElementById("donutChart");
  const analyticsCanvas = document.getElementById("analyticsChart");

  activeList.innerHTML = "";
  inactiveList.innerHTML = "";
  cardsEl.innerHTML = "";
  familyEl.innerHTML = "";

  let total = 0;
  const catMap = {};

  –ø–æ–¥–ø–∏—Å–∫–∏.forEach(sub => {
    const li = document.createElement("li");
    li.innerHTML = `${sub.name} ‚Äî ${sub.price} ‚ÇΩ
      <div>
        <button onclick="toggleSub(${sub.id})">üîÑ</button>
        <button onclick="removeSub(${sub.id})">‚úñ</button>
      </div>`;
    if (sub.active) {
      total += sub.price;
      activeList.appendChild(li);
      catMap[sub.category] = (catMap[sub.category] || 0) + sub.price;
    } else {
      inactiveList.appendChild(li);
    }
  });

  totalEl.textContent = `‚Äì${total} ‚ÇΩ`;

  const labels = Object.keys(catMap);
  const values = Object.values(catMap);

  if (donutChart) donutChart.destroy();
  if (barChart) barChart.destroy();
  if (analyticsChart) analyticsChart.destroy();

  donutChart = new Chart(donutCanvas, {
    type: "doughnut",
    data: { labels, datasets: [{ data: values, backgroundColor: ["#3a7bd5", "#00a896", "#ffc107", "#ef476f"] }] },
    options: { responsive: false, plugins: { legend: { position: "bottom" } } }
  });

  barChart = new Chart(barCanvas, {
    type: "bar",
    data: {
      labels,
      datasets: [{ label: "‚ÇΩ", data: values, backgroundColor: "#00a896" }]
    },
    options: { responsive: false, scales: { y: { beginAtZero: true } } }
  });

  analyticsChart = new Chart(analyticsCanvas, {
    type: "line",
    data: {
      labels: ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω"],
      datasets: [{
        label: "–¢—Ä–∞—Ç—ã",
        data: [2200, 2750, 2900, 3100, 3300, total],
        fill: false,
        borderColor: "#3a7bd5",
        tension: 0.3
      }]
    },
    options: { responsive: false }
  });

  –∫–∞—Ä—Ç—ã.forEach(c => {
    const li = document.createElement("li");
    li.textContent = c;
    cardsEl.appendChild(li);
  });

  —Å–µ–º—å—è.forEach(m => {
    const li = document.createElement("li");
    li.textContent = m;
    familyEl.appendChild(li);
  });
}

// === –ó–ê–ü–£–°–ö ===
window.addEventListener("load", () => {
  // —Ç–µ–º–∞
  if (localStorage.getItem("checkme_theme") === "dark") {
    document.body.classList.add("dark");
  }

  // –ø—Ä–æ—Ñ–∏–ª—å
  const name = localStorage.getItem("checkme_name");
  const email = localStorage.getItem("checkme_email");
  if (name) document.getElementById("profile-name").value = name;
  if (email) document.getElementById("profile-email").value = email;

  // –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  document.querySelectorAll(".nav-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const screen = btn.getAttribute("data-target");
      switchScreen(screen);
    });
  });

  toggleSubTab("active");
  render();
});


// === –ò–ú–ü–û–†–¢ CSV ===
function handleCSVImport(file) {
  const reader = new FileReader();
  reader.onload = function(e) {
    const lines = e.target.result.split('\n').slice(1);
    const detected = {};
    for (const line of lines) {
      const [date, desc, amount] = line.split(',');
      if (!desc || !amount) continue;
      const trimmed = desc.trim();
      const val = parseFloat(amount);
      if (!detected[trimmed]) {
        detected[trimmed] = { count: 1, total: val };
      } else {
        detected[trimmed].count += 1;
        detected[trimmed].total += val;
      }
    }

    for (const name in detected) {
      const entry = detected[name];
      if (entry.count >= 2 && !–ø–æ–¥–ø–∏—Å–∫–∏.find(s => s.name === name)) {
        –ø–æ–¥–ø–∏—Å–∫–∏.push({
          id: Date.now() + Math.random(),
          name,
          price: Math.round(entry.total / entry.count),
          category: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
          active: true,
          icon: "https://cdn-icons-png.flaticon.com/512/25/25694.png"
        });
      }
    }

    saveData();
    render();
    alert("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.");
  };
  reader.readAsText(file);
}


// === –≠–ö–°–ü–û–†–¢ –í PDF ===
function exportToPDF() {
  const doc = new jsPDF();
  doc.text("–ü–æ–¥–ø–∏—Å–∫–∏ CheckMe", 14, 16);
  let y = 30;
  –ø–æ–¥–ø–∏—Å–∫–∏.forEach(sub => {
    doc.text(`${sub.name}: ${sub.price} ‚ÇΩ (${sub.active ? "–∞–∫—Ç–∏–≤–Ω–∞" : "–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞"})`, 14, y);
    y += 8;
  });
  doc.save("checkme_report.pdf");
}

// === –≠–ö–°–ü–û–†–¢ –í EXCEL ===
function exportToExcel() {
  const wb = XLSX.utils.book_new();
  const data = –ø–æ–¥–ø–∏—Å–∫–∏.map(s => ({
    –ù–∞–∑–≤–∞–Ω–∏–µ: s.name,
    –°—É–º–º–∞: s.price,
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: s.category,
    –°—Ç–∞—Ç—É—Å: s.active ? "–ê–∫—Ç–∏–≤–Ω–∞" : "–ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞"
  }));
  const ws = XLSX.utils.json_to_sheet(data);
  XLSX.utils.book_append_sheet(wb, ws, "–ü–æ–¥–ø–∏—Å–∫–∏");
  XLSX.writeFile(wb, "checkme_report.xlsx");
}

// === –§–ò–õ–¨–¢–† –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò ===
function filterByCategory(cat) {
  const filtered = –ø–æ–¥–ø–∏—Å–∫–∏.filter(s => s.category === cat || cat === "–í—Å–µ");
  render(filtered);
}

// === –ü–û–ò–°–ö ===
function searchSubscriptions(query) {
  const filtered = –ø–æ–¥–ø–∏—Å–∫–∏.filter(s => s.name.toLowerCase().includes(query.toLowerCase()));
  render(filtered);
}


// === –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø ===
let savingsCounter = 0;
function updateSavingsDisplay() {
  const saved = –ø–æ–¥–ø–∏—Å–∫–∏.filter(s => !s.active).reduce((sum, s) => sum + s.price, 0);
  savingsCounter = saved;
  const el = document.getElementById("savings-counter");
  if (el) el.textContent = `üí∞ –í—ã —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏: ${saved} ‚ÇΩ`;
}

// === –¶–ï–õ–ò ===
let savingsGoal = 1000;
function checkGoal() {
  if (savingsCounter >= savingsGoal) {
    alert("üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –í—ã —É–º–µ–Ω—å—à–∏–ª–∏ —Ç—Ä–∞—Ç—ã –Ω–∞ 1000‚ÇΩ –∏–ª–∏ –±–æ–ª—å—à–µ!");
  }
}

// === EMAIL –£–í–ï–î–û–ú–õ–ï–ù–ò–ï ===
function sendReminder(email) {
  const message = `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–∫–æ—Ä–æ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏!\n\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n` + 
    –ø–æ–¥–ø–∏—Å–∫–∏.filter(s => s.active).map(s => `${s.name}: ${s.price} ‚ÇΩ`).join('\n');
  alert(`–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ ${email}:\n\n` + message);
}


// === –£–î–ê–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–ê ===
function removeFamilyMember(index) {
  if (confirm("–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?")) {
    —Å–µ–º—å—è.splice(index, 1);
    saveData();
    render();
  }
}
